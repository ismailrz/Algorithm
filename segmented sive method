#include<iostream>
#include<cstdio>
#include<cstring>
#include<map>
#include<string>
#include<cmath>
#include<cctype>
#include<stack>
#include<cstdlib>
#include<utility>
#include<vector>
#include<deque>
#include<queue>
#include<algorithm>

#define gcd(a,b) __gcd(a,b)
#define ff first
#define ss second
#define sc scanf
#define pf printf
#define endl '\n'
#define pii pair(int,int)
#define pi acos(-1.0)
#define Sin(a) sin((pi*a)/180);
#define siz 99999999
#define mem(ar) memset(ar,0,sizeof ar)
#define one(x) __builtin_popcount(x)
typedef  unsigned long long ll;

using namespace std;
#define DIFF_SIZE 1000001
bool prime[DIFF_SIZE];
ll myPrimes[siz];
bool Final_prime[DIFF_SIZE];
ll cnt=1;
ll result[siz];
void sive()
{
    ll sq,i,j,m;
    for(i=4; i<=DIFF_SIZE; i+=2)
        prime[i]=true;
    prime[1]=true;
    sq=sqrt(DIFF_SIZE);
    for(i=3; i<=DIFF_SIZE; i+=2)
    {
        if(prime[i]==false)
        {
            for(j=2*i; j<=DIFF_SIZE; j+=i)
                prime[j]=true;
        }
    }
    myPrimes[0]=2;
    for(i=3; i<=DIFF_SIZE; i+=2)
    {
        if(prime[i]==false)
            myPrimes[cnt++]=i;
    }
}
int main()
{
    sive();
    ll i,j,lo,hi,sum,a,b,x,t,y,t1,r,lo2;
    while(sc("%llu%llu",&lo,&hi)==2)
    {
        cnt=78498;
        for(i=0; i<cnt; i++)
        {
            a=myPrimes[i];
            b=lo/a;
            x=a*b;
            for(j=x; j<=hi; j+=a)
            {
                if(j-lo<0)continue;
                Final_prime[j-lo]=true;
            }
        }
        for(i=0; i<hi-lo+1; i++)
        {
            if(Final_prime[i]==false&&(i+lo)!=1)
            {
                myPrimes[cnt++]=(lo+i);
            }
        }
        ll r=0;
        for(i=0; i<cnt; i++)
        {
            if(myPrimes[i]>=lo&&myPrimes[i]<=hi)
            {
                result[r++]=myPrimes[i];
            }
        }
        ll dist, mx=0;
        ll min =99999999999;
        if(r==0)
            pf("There are no adjacent primes.\n");
        else
        {
            for(i=0; i<r-1; i++)
            {
                dist=result[i+1]-result[i];
                if(dist>mx)
                {
                    x=result[i];
                    y=result[i+1];
                    mx=dist;
                }
                if(dist<min)
                {
                    min =dist;
                    a=result[i];
                    b=result[i+1];
                }
            }
            if(mx==0)
                pf("There are no adjacent primes.\n");
            else
                pf("%llu,%llu are closest, %llu,%llu are most distant.\n",a,b,x,y);
        }
        mem(Final_prime);
    }

}


